#include "structures.fxh"
#include "lighting.fxh"

// Declarar el buffer de constantes globales
cbuffer PSConstants
{
    GlobalConstants g_Constants;
}

// Buffer para las constantes de iluminación
cbuffer PSLightAttribs
{
    LightAttribs g_LightAttribs;
}

Texture2D    g_Texture;
SamplerState g_Texture_sampler; // By convention, texture samplers must use _sampler suffix

float4 WireTerrainPS(TerrainGSOut ps_in) : SV_TARGET
{
    // Obtener el color base de la textura
    float4 BaseColor = g_Texture.Sample(g_Texture_sampler, ps_in.DSOut.uv);
    
    // Calcular la normal del terreno
    float3 ddx = ddx(ps_in.DSOut.Pos.xyz);
    float3 ddy = ddy(ps_in.DSOut.Pos.xyz);
    float3 Normal = normalize(cross(ddx, ddy));
    
    // Calcular la iluminación
    float3 LitColor = CalculateLighting(Normal, BaseColor.rgb, g_LightAttribs);
    
    // Añadir efecto de neblina basado en el nivel de erosión y la altura
    float heightFog = max(0.0, 1.0 - (ps_in.DSOut.WorldPos.y / (g_Constants.HeightScale * 0.5))); 
    float fogFactor = heightFog * g_Constants.ErosionLevel * 0.5; // Intensidad de la neblina
    
    // Color de la neblina - azulado para simular niebla de erosión fluvial
    float3 fogColor = float3(0.7, 0.8, 1.0) * g_LightAttribs.AmbientColor.xyz;
    
    // Aplicar neblina al color iluminado
    LitColor = lerp(LitColor, fogColor, fogFactor);
    
    // Compute distance to the closest edge
    float minDist = min(ps_in.DistToEdges.x, ps_in.DistToEdges.y);
    minDist = min(minDist, ps_in.DistToEdges.z);

    float lineWidth = g_Constants.LineWidth;
    float lineIntensity = saturate((lineWidth - minDist) / lineWidth);

    // Color del borde (negro)
    float3 EdgeColor = float3(0.0, 0.0, 0.0);
    
    // Mezclar color iluminado con color de borde según la intensidad
    float3 FinalColor = lerp(LitColor, EdgeColor, lineIntensity);
    
#if CONVERT_PS_OUTPUT_TO_GAMMA
    // Use fast approximation for gamma correction.
    FinalColor = pow(FinalColor, float3(1.0 / 2.2, 1.0 / 2.2, 1.0 / 2.2));
#endif
    
    return float4(FinalColor, BaseColor.a);
}